# requires fluent-plugin-github-activities
<source>
  type github-activities
  # Authentication is strongly recommended, because there is a rate limit: 60requests/hour by default.
  # With authentication, it becomes 5000requests/hour (means about 80requests/minute).
  basic_username your-user-name-of-github
  basic_password your-password-of-github
  users ashie,co-me,cosmo0920,hayamiz,hhatto,kenhys,kou,min-shin,monkey-mas,mooz,okkez,piroor,ridec,s-yata,t2y
  interval 1
</source>


# mapping rules (requires fluent-plugin-map)


## commit and push

<match github-activity.push>
  type map
  # You cannot define a string literal starting with double quote directly...
  tag "\"sharetary.\" + tag"
  time time
  # You cannot use embedding patterns like "prefix #{variable}" because fluentd recognizes "#" mark next to a whitespace as the start of the comment of the line.
  # Instead you must use concatenation of strings like: '"prefix " + variable'
  record (require("time") || true) && { "_key" => "https://github.com/#{record["repo"]["name"]}/compare/#{record["payload"]["before"]}...#{record["payload"]["head"]}", "type" => "code", "repository" => record["repo"]["name"], "title" => "Pushed " + record["payload"]["size"].to_s + " commits to " + record["repo"]["name"], "description" => "Pushed " + record["payload"]["size"].to_s + " commits to " + record["repo"]["name"], "author" => record["actor"]["login"], "uri" => "https://github.com/#{record["repo"]["name"]}/compare/#{record["payload"]["before"]}...#{record["payload"]["head"]}", "reply_uri" => "https://github.com/#{record["repo"]["name"]}/compare/#{record["payload"]["before"]}...#{record["payload"]["head"]}#commits_bucket", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => nil }
</match>

<match github-activity.commit>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["html_url"], "type" => "code", "repository" => record["url"].match(/repos\/([^\/]+\/[^\/]+)\/commits/)[1], "title" => "Commited " + record["stats"]["total"].to_s + " changes to " + record["url"].match(/repos\/([^\/]+\/[^\/]+)\/commits/)[1], "description" => record["commit"]["message"] + " (#{record["stats"]["total"].to_s} change(s))", "author" => record["committer"]["login"], "uri" => record["html_url"], "reply_uri" => "#{record["html_url"]}#new_commit_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["commit"]["committer"]["date"]).to_i, "parent" => nil }
</match>


## comments on commits

<match github-activity.commit-comment>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["comment"]["html_url"], "type" => "comment", "repository" => record["repo"]["name"], "title" => "Commented to the commit " + record["repo"]["name"] + "/#{record["payload"]["comment"]["commit_id"]}", "description" => record["payload"]["comment"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["comment"]["html_url"], "reply_uri" => "#{record["payload"]["comment"]["html_url"].split("#").first}#new_commit_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["comment"]["html_url"].split("#").first }
</match>


## issues

<match github-activity.issue.open>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["issue"]["html_url"], "type" => "comment", "repository" => record["repo"]["name"], "title" => "Opened new issue: " + "#" + record["payload"]["issue"]["number"].to_s + " " + record["payload"]["issue"]["title"], "description" => record["payload"]["issue"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["issue"]["html_url"], "reply_uri" => "#{record["payload"]["issue"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => nil }
</match>

<match github-activity.issue.close>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["issue"]["html_url"] + "#" + Time.parse(record["payload"]["issue"]["updated_at"]).to_i.to_s, "type" => "comment", "repository" => record["repo"]["name"], "title" => "Closed the issue: " + "#" + record["payload"]["issue"]["number"].to_s + " " + record["payload"]["issue"]["title"], "description" => record["payload"]["issue"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["issue"]["html_url"], "reply_uri" => "#{record["payload"]["issue"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["issue"]["html_url"] }
</match>

<match github-activity.issue.reopen>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["issue"]["html_url"] + "#" + Time.parse(record["payload"]["issue"]["updated_at"]).to_i.to_s, "type" => "comment", "repository" => record["repo"]["name"], "title" => "Reopened the issue: " + "#" + record["payload"]["issue"]["number"].to_s + " " + record["payload"]["issue"]["title"], "description" => record["payload"]["issue"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["issue"]["html_url"], "reply_uri" => "#{record["payload"]["issue"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["issue"]["html_url"] }
</match>

<match github-activity.issue.comment>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["comment"]["html_url"], "type" => "comment", "repository" => record["repo"]["name"], "title" => "Commented to the issue: " + "#" + record["payload"]["issue"]["number"].to_s + " " + record["payload"]["issue"]["title"], "description" => record["payload"]["comment"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["comment"]["html_url"], "reply_uri" => "#{record["payload"]["comment"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["issue"]["html_url"] }
</match>


## pull requests

<match github-activity.pull-request.open>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["pull_request"]["html_url"], "type" => "pull-request", "title" => "Created new pull-request: " + "#" + record["payload"]["pull_request"]["number"].to_s + " " + record["payload"]["pull_request"]["title"], "description" => record["payload"]["pull_request"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["pull_request"]["html_url"], "reply_uri" => "#{record["payload"]["pull_request"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => nil }
</match>

<match github-activity.pull-request.reopen>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["pull_request"]["html_url"] + "#" + Time.parse(record["payload"]["pull_request"]["updated_at"]).to_i.to_s, "type" => "pull-request", "repository" => record["repo"]["name"], "title" => "Reopened the pull-request " + "#" + record["payload"]["pull_request"]["number"].to_s + " " + record["payload"]["pull_request"]["title"], "description" => record["payload"]["pull_request"]["body"], "author" => rrecord["actor"]["login"], "uri" => record["payload"]["pull_request"]["html_url"], "reply_uri" => "#{record["payload"]["pull_request"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["pull_request"]["html_url"] }
</match>

<match github-activity.pull-request.merged>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["pull_request"]["html_url"] + "#" + Time.parse(record["payload"]["pull_request"]["updated_at"]).to_i.to_s, "type" => "pull-request", "repository" => record["repo"]["name"], "repository" => record["repo"]["name"], "title" => "Merged the pull-request \"#" + record["payload"]["pull_request"]["number"].to_s + " " + record["payload"]["pull_request"]["title"], "description" => record["payload"]["pull_request"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["pull_request"]["html_url"], "reply_uri" => "#{record["payload"]["pull_request"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["pull_request"]["html_url"] }
</match>

<match github-activity.pull-request.cancelled>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["pull_request"]["html_url"] + "#" + Time.parse(record["payload"]["pull_request"]["updated_at"]).to_i.to_s, "type" => "pull-request", "repository" => record["repo"]["name"], "title" => "Cancelled the pull-request \"#" + record["payload"]["pull_request"]["number"].to_s + " " + record["payload"]["pull_request"]["title"], "description" => record["payload"]["pull_request"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["pull_request"]["html_url"], "reply_uri" => "#{record["payload"]["pull_request"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => record["payload"]["pull_request"]["html_url"] }
</match>

<match github-activity.pull-request.comment>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["comment"]["html_url"], "type" => "pull-request", "repository" => record["repo"]["name"], "title" => "Commented to the issue: " + "#" + record["payload"]["issue"]["number"].to_s + " " + record["payload"]["issue"]["title"], "description" => record["payload"]["comment"]["body"], "author" => record["actor"]["login"], "uri" => record["payload"]["comment"]["html_url"], "reply_uri" => "#{record["payload"]["comment"]["html_url"].split("#").first}#new_comment_field", "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["payload"]["comment"]["created_at"]).to_i, "parent" => record["payload"]["issue"]["pull_request"]["html_url"] }
</match>


## fork

<match github-activity.fork>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => record["payload"]["forkee"]["html_url"] + "#forked", "type" => "code", "repository" => record["payload"]["forkee"]["full_name"], "title" => "Forked the repository " + record["repo"]["full_name"] + " to " + record["payload"]["forkee"]["full_name"], "description" => "Forked the repository " + record["repo"]["full_name"] + " to " + record["payload"]["forkee"]["full_name"], "author" => record["actor"]["login"], "uri" => record["payload"]["forkee"]["html_url"] + "#forked", "reply_uri" => nil, "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => nil }
</match>


## branch, tag

<match github-activity.branch>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => "https://github.com/" + record["repo"]["name"] + "/tree/" + record["payload"]["ref"], "type" => "code", "repository" => record["repo"]["name"], "title" => "Created new branch " + record["payload"]["ref"] " at the repository " + record["payload"]["repository"]["full_name"], "description" => "Created new branch " + record["payload"]["ref"] " at the repository " + record["payload"]["repository"]["full_name"], "author" => record["actor"]["login"], "uri" => "https://github.com/" + record["repo"]["name"] + "/tree/" + record["payload"]["ref"], "reply_uri" => nil, "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => nil }
</match>

<match github-activity.tag>
  type map
  tag "\"sharetary.\" + tag"
  time time
  record (require("time") || true) && { "_key" => "https://github.com/" + record["repo"]["name"] + "/tree/" + record["payload"]["ref"], "type" => "code", "repository" => record["repo"]["name"], "title" => "Created new tag " + record["payload"]["ref"] " at the repository " + record["payload"]["repository"]["full_name"], "description" => "Created new tag " + record["payload"]["ref"] " at the repository " + record["payload"]["repository"]["full_name"], "author" => record["actor"]["login"], "uri" => "https://github.com/" + record["repo"]["name"] + "/tree/" + record["payload"]["ref"], "reply_uri" => nil, "created_at" => Time.now.to_i, "timestamp" => Time.parse(record["created_at"]).to_i, "parent" => nil }
</match>



# for debugging
#
#<match sharetary.**>
#  type stdout
#</match>


# storing data into Groonga's database (requires fluent-plugin-groonga)
<match sharetary.**>
  type groonga
  store_table Events

  protocol http
  host localhost

  buffer_type file
  buffer_path /var/spool/td-agent/buffer/groonga
  flush_interval 1s

  <table>
    name Timestamps
    flags TABLE_PAT_KEY
    key_type Time
  </table>

  <table>
    name Terms
    flags TABLE_PAT_KEY
    key_type ShortText
    default_tokenizer TokenBigram
    normalizer NormalizerAuto
  </table>

  <mapping>
    name type
    type ShortText
  </mapping>

  <mapping>
    name title
    type ShortText
    <index>
      table Terms
      name Events_title_index
      flags WITH_POSITION
    </index>
  </mapping>

  <mapping>
    name description
    type Text
    <index>
      table Terms
      name Events_description_index
      flags WITH_POSITION
    </index>
  </mapping>

  <mapping>
    name repository
    type ShortText
    <index>
      table Terms
      name Events_repository_index
      flags WITH_POSITION
    </index>
  </mapping>

  <mapping>
    name uri
    type ShortText
    <index>
      table Terms
      name Events_uri_index
      flags WITH_POSITION
    </index>
  </mapping>

  <mapping>
    name reply_uri
    type ShortText
  </mapping>

  <mapping>
    name author
    type ShortText
    <index>
      table Terms
      name Events_author_index
      flags WITH_POSITION
    </index>
  </mapping>

  <mapping>
    name timestamp
    type Time
    <index>
      table Timestamps
      name Events_timestamp_index
    </index>
  </mapping>

  <mapping>
    name created_at
    type Time
    <index>
      table Timestamps
      name Events_created_at_index
    </index>
  </mapping>

  <mapping>
    name parent
    type ShortText
    <index>
      table Terms
      name Events_parent_index
      flags WITH_POSITION
    </index>
  </mapping>
</match>

